Indexing Moving Points We propose three indexing schemes for storing a set S of N points in the plane, each moving  along a linear trajectory, so that a query of the following form can be answered quickly: Given  a rectangle R and a real value t q , report all K points of S that lie inside R at time t q . We  first present an indexing structure that, for any given constant " ? 0, uses O(N=B) disk blocks,  where B is the block size, and answers a query in O((N=B)  1=2+"  + K=B) I/Os. It can also  report all the points of S that lie inside R during a given time interval. A point can be inserted  or deleted, or the trajectory of a point can be changed, in O(log  2  B N) I/Os. Next, we present a  general approach that improves the query time if the queries arrive in chronological order, by  allowing the index to evolve over time. We obtain a tradeoff between the query time and the  number of times the index needs to be updated as the points move. We also describe an indexing  scheme in which the number of I/Os required to answer a query depends monotonically on the  difference between t q and the current time. Finally, we develop an efficient indexing scheme to  answer approximate nearest-neighbor queries among moving points.  An extended abstract of this paper appeared in the Proceedings of the 19th ACM SIGACT-SIGMOD-SIGART Symposium on Principles of Database Systems.  y  Center for Geometric Computing, Department of Computer Science, Duke University, Box 90129, Durham, NC 27708--0129; pankaj@cs.duke.edu; http://www.cs.duke.edu/  pankaj. Supported in part by National Science Foundation grants EIA--9870734, EIA--9972879, and CCR--9732787, by Army Research Of fice MURI grant DAAH04-- 96--1--0013, by a Sloan fellowship, and by a grant from the U.S.-Israeli Binational Science Foundation.  z  Center ...
